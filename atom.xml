<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TheBeat&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-21T03:57:30.933Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>TheBeat</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法总结(Java语言版)</title>
    <link href="http://yoursite.com/2018/06/21/SortAlgorithm/"/>
    <id>http://yoursite.com/2018/06/21/SortAlgorithm/</id>
    <published>2018-06-21T02:19:38.000Z</published>
    <updated>2018-06-21T03:57:30.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>从基本的O(n^2)时间复杂度的冒泡排序，选择排序，插入排序以及希尔排序到O(nlogn)高级排序算法,归并排序，快速排序，堆排序。分析各个算法的时间复杂度，空间复杂度等，以及适应的场景。</p><a id="more"></a><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-基本排序算法"><a href="#1-基本排序算法" class="headerlink" title="1.基本排序算法"></a><a href="#1">1.基本排序算法</a></h2><h4 id="1-1-冒泡排序"><a href="#1-1-冒泡排序" class="headerlink" title="1.1 冒泡排序"></a><a href="#1.1">1.1 冒泡排序</a></h4><h4 id="1-2-选择排序"><a href="#1-2-选择排序" class="headerlink" title="1.2 选择排序"></a><a href="#1.2">1.2 选择排序</a></h4><h4 id="1-3-插入排序"><a href="#1-3-插入排序" class="headerlink" title="1.3 插入排序"></a><a href="#1.3">1.3 插入排序</a></h4><h4 id="1-4-希尔排序"><a href="#1-4-希尔排序" class="headerlink" title="1.4 希尔排序"></a><a href="#1.4">1.4 希尔排序</a></h4><h2 id="2-高级排序算法"><a href="#2-高级排序算法" class="headerlink" title="2.高级排序算法"></a><a href="#2">2.高级排序算法</a></h2><h4 id="2-1-归并排序"><a href="#2-1-归并排序" class="headerlink" title="2.1 归并排序"></a><a href="#2.1">2.1 归并排序</a></h4><h4 id="2-2-快速排序"><a href="#2-2-快速排序" class="headerlink" title="2.2 快速排序"></a><a href="#2.2">2.2 快速排序</a></h4><h4 id="2-3-堆排序"><a href="#2-3-堆排序" class="headerlink" title="2.3 堆排序"></a><a href="#2.3">2.3 堆排序</a></h4><h2 id="3-各个排序算法总结"><a href="#3-各个排序算法总结" class="headerlink" title="3.各个排序算法总结"></a><a href="#3">3.各个排序算法总结</a></h2><hr><h1 id="1-基本排序算法-1"><a href="#1-基本排序算法-1" class="headerlink" title=" 1. 基本排序算法"></a><span id="1"> 1. 基本排序算法</span></h1><h2 id="1-1-冒泡排序-1"><a href="#1-1-冒泡排序-1" class="headerlink" title=" 1.1 冒泡排序"></a><span id="1.1"> 1.1 冒泡排序</span></h2><figure class="highlight java"><figcaption><span>Bubble.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n-i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[j].compareTo(a[j-<span class="number">1</span>])&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    swap(a,j-<span class="number">1</span>, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] a,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        T temp=a[m];</span><br><span class="line">        a[m]=a[n];</span><br><span class="line">        a[n]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-选择排序-1"><a href="#1-2-选择排序-1" class="headerlink" title=" 1.2 选择排序"></a><span id="1.2"> 1.2 选择排序</span></h2><figure class="highlight java"><figcaption><span>SelectionSort.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex=i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j].compareTo(arr[minIndex])&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    minIndex=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">           swap(arr,i,minIndex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Comparable t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-插入排序-1"><a href="#1-3-插入排序-1" class="headerlink" title=" 1.3 插入排序"></a><span id="1.3"> 1.3 插入排序</span></h2><figure class="highlight java"><figcaption><span>InsertionSort.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            T temp=a[i];</span><br><span class="line">            <span class="keyword">for</span>( j=i;j&gt;<span class="number">0</span>&amp;&amp;temp.compareTo(a[j-<span class="number">1</span>])&lt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">                a[j]=a[j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            a[j]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-希尔排序-1"><a href="#1-4-希尔排序-1" class="headerlink" title=" 1.4 希尔排序"></a><span id="1.4"> 1.4 希尔排序</span></h2><figure class="highlight java"><figcaption><span>ShellSort.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="comment">// 希尔增量</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> gap=n/<span class="number">2</span>;gap&gt;<span class="number">0</span>;gap/=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=gap;i&lt;n;i++)&#123;</span><br><span class="line">                T temp=a[i];</span><br><span class="line">                <span class="keyword">for</span>(j=i;j&gt;=gap &amp;&amp; temp.compareTo(a[j-gap])&lt;<span class="number">0</span>;j-=gap)&#123;</span><br><span class="line">                    a[j]=a[j-gap];</span><br><span class="line">                &#125;</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-高级排序算法-1"><a href="#2-高级排序算法-1" class="headerlink" title=" 2. 高级排序算法"></a><span id="2"> 2. 高级排序算法</span></h1><h2 id="2-1-归并排序-1"><a href="#2-1-归并排序-1" class="headerlink" title=" 2.1 归并排序"></a><span id="2.1"> 2.1 归并排序</span></h2><h3 id="2-1-1-自顶向下的归并排序（递归实现）"><a href="#2-1-1-自顶向下的归并排序（递归实现）" class="headerlink" title="2.1.1 自顶向下的归并排序（递归实现）"></a>2.1.1 自顶向下的归并排序（递归实现）</h3><figure class="highlight java"><figcaption><span>MergeSort.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        T [] temp=(T[]) <span class="keyword">new</span> Comparable[n];</span><br><span class="line">        mergeSort(a,temp,<span class="number">0</span>,n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(T[] a, T[] temp, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 可优化 ，小数据进行插入排序</span></span><br><span class="line">        <span class="keyword">if</span>(l&lt;r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            mergeSort(a, temp, l, mid);</span><br><span class="line">            mergeSort(a, temp, mid + <span class="number">1</span>, r);</span><br><span class="line">            <span class="comment">// 近乎有序时 能优化</span></span><br><span class="line">            <span class="comment">// 如果已经有序，不进行merge</span></span><br><span class="line">            <span class="keyword">if</span>(a[mid].compareTo(a[mid+<span class="number">1</span>])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                merge(a, temp, l, mid + <span class="number">1</span>, r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] a, T[] temp, <span class="keyword">int</span> leftPos, <span class="keyword">int</span> rightPos,<span class="keyword">int</span> rightEnd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftEnd=rightPos-<span class="number">1</span>; <span class="comment">// the end pos of left arr</span></span><br><span class="line">        <span class="keyword">int</span> tmpPos=leftPos;     <span class="comment">// current pos of merge arr</span></span><br><span class="line">        <span class="keyword">int</span> numElements=rightEnd-leftPos+<span class="number">1</span>;  <span class="comment">// the number of elements of merge arr</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// main loop</span></span><br><span class="line">        <span class="comment">// the left and right arr are both incompletely sorted</span></span><br><span class="line">        <span class="keyword">while</span>(leftPos&lt;=leftEnd &amp;&amp; rightPos&lt;=rightEnd)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[leftPos].compareTo(a[rightPos])&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                temp[tmpPos++]=a[leftPos++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp[tmpPos++]=a[rightPos++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the left arr is incompletely sorted</span></span><br><span class="line">        <span class="keyword">while</span> (leftPos&lt;=leftEnd)&#123;</span><br><span class="line">            temp[tmpPos++]=a[leftPos++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the right arr is incompletely sorted</span></span><br><span class="line">        <span class="keyword">while</span> (rightPos&lt;=rightEnd)&#123;</span><br><span class="line">            temp[tmpPos++]=a[rightPos++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy the elements of temp arr to a</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numElements;i++,rightEnd--)&#123;</span><br><span class="line">            a[rightEnd]=temp[rightEnd];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-自底向上的归并排序（非递归实现）"><a href="#2-1-2-自底向上的归并排序（非递归实现）" class="headerlink" title="2.1.2 自底向上的归并排序（非递归实现）"></a>2.1.2 自底向上的归并排序（非递归实现）</h3><figure class="highlight java"><figcaption><span>MergeSortBU.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortBU</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        T [] temp=(T[]) <span class="keyword">new</span> Comparable[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可优化 ，小数据进行插入排序</span></span><br><span class="line">        <span class="comment">// sz 从某一个数起</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> sz=<span class="number">1</span>;sz&lt;n;sz*=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-sz;i+=<span class="number">2</span>*sz)&#123;</span><br><span class="line">                <span class="comment">// 如果已经有序，不进行merge</span></span><br><span class="line">                <span class="keyword">if</span>(a[i + sz-<span class="number">1</span>].compareTo(a[i+sz])&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                    merge(a, temp, i, i + sz, Math.min(i + <span class="number">2</span> * sz - <span class="number">1</span>, n - <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(T[] a, T[] temp, <span class="keyword">int</span> leftPos, <span class="keyword">int</span> rightPos,<span class="keyword">int</span> rightEnd)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> leftEnd=rightPos-<span class="number">1</span>; <span class="comment">// the end pos of left arr</span></span><br><span class="line">        <span class="keyword">int</span> tmpPos=leftPos;     <span class="comment">// current pos of merge arr</span></span><br><span class="line">        <span class="keyword">int</span> numElements=rightEnd-leftPos+<span class="number">1</span>;  <span class="comment">// the number of elements of merge arr</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// main loop</span></span><br><span class="line">        <span class="comment">// the left and right arr are both incompletely sorted</span></span><br><span class="line">        <span class="keyword">while</span>(leftPos&lt;=leftEnd &amp;&amp; rightPos&lt;=rightEnd)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[leftPos].compareTo(a[rightPos])&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                temp[tmpPos++]=a[leftPos++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                temp[tmpPos++]=a[rightPos++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the left arr is incompletely sorted</span></span><br><span class="line">        <span class="keyword">while</span> (leftPos&lt;=leftEnd)&#123;</span><br><span class="line">            temp[tmpPos++]=a[leftPos++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the right arr is incompletely sorted</span></span><br><span class="line">        <span class="keyword">while</span> (rightPos&lt;=rightEnd)&#123;</span><br><span class="line">            temp[tmpPos++]=a[rightPos++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// copy the elements of temp arr to a</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numElements;i++,rightEnd--)&#123;</span><br><span class="line">            a[rightEnd]=temp[rightEnd];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-基于链表的归并排序"><a href="#2-1-3-基于链表的归并排序" class="headerlink" title="2.1.3 基于链表的归并排序"></a>2.1.3 基于链表的归并排序</h3><figure class="highlight java"><figcaption><span>MergeSortList.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function">ListNode&lt;T&gt; <span class="title">sort</span><span class="params">(ListNode&lt;T&gt; head)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.getNext()==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode p1=head; <span class="comment">// locate the half of the list</span></span><br><span class="line">        ListNode p2=head.getNext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p2!=<span class="keyword">null</span> &amp;&amp; p2.getNext()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p1=p1.getNext();</span><br><span class="line">            p2=p2.getNext().getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the right half list</span></span><br><span class="line">        ListNode&lt;T&gt; r=sort(p1.getNext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cut off the list</span></span><br><span class="line">        p1.setNext(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the left half list</span></span><br><span class="line">        ListNode&lt;T&gt; l=sort(head);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(l,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function">ListNode&lt;T&gt; <span class="title">merge</span><span class="params">(ListNode&lt;T&gt; l, ListNode&lt;T&gt; r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l!=<span class="keyword">null</span> &amp;&amp; r!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l.getVal().compareTo(r.getVal())&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                l.setNext(merge(l.getNext(),r));</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r.setNext(merge(l,r.getNext()));</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>MergeSortList.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSortList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function">ListNode&lt;T&gt; <span class="title">sort</span><span class="params">(ListNode&lt;T&gt; head)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head==<span class="keyword">null</span> || head.getNext()==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode p1=head; <span class="comment">// locate the half of the list</span></span><br><span class="line">        ListNode p2=head.getNext();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p2!=<span class="keyword">null</span> &amp;&amp; p2.getNext()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            p1=p1.getNext();</span><br><span class="line">            p2=p2.getNext().getNext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the right half list</span></span><br><span class="line">        ListNode&lt;T&gt; r=sort(p1.getNext());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// cut off the list</span></span><br><span class="line">        p1.setNext(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// the left half list</span></span><br><span class="line">        ListNode&lt;T&gt; l=sort(head);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(l,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function">ListNode&lt;T&gt; <span class="title">merge</span><span class="params">(ListNode&lt;T&gt; l, ListNode&lt;T&gt; r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l!=<span class="keyword">null</span> &amp;&amp; r!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l.getVal().compareTo(r.getVal())&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                l.setNext(merge(l.getNext(),r));</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                r.setNext(merge(l,r.getNext()));</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l==<span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-快速排序-1"><a href="#2-2-快速排序-1" class="headerlink" title=" 2.2 快速排序"></a><span id="2.2"> 2.2 快速排序</span></h2><h3 id="2-2-1-单路快排"><a href="#2-2-1-单路快排" class="headerlink" title="2.2.1 单路快排"></a>2.2.1 单路快排</h3><figure class="highlight java"><figcaption><span>QuickSort.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对a[l...r]部分进行快速排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(T[] a,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> p=partition(a,l,r);</span><br><span class="line">        quickSort(a,l,p-<span class="number">1</span>);</span><br><span class="line">        quickSort(a,p+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对a[l...r]部分进行partition操作</span></span><br><span class="line">    <span class="comment">// 返回p,使得a[l...p-1]&lt;a[p]&lt;=a[p+1...r]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(T[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=l+(<span class="keyword">int</span>)(Math.random()*(r-l+<span class="number">1</span>));</span><br><span class="line">        swap(a,l,n);</span><br><span class="line">        T v=a[l];</span><br><span class="line">        <span class="comment">// a[l+1...j]&lt;v&lt;a[j+1...i)</span></span><br><span class="line">        <span class="keyword">int</span> j=l;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].compareTo(v)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                swap(a,i,j+<span class="number">1</span>);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(a,l,j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] a,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        T temp=a[m];</span><br><span class="line">        a[m]=a[n];</span><br><span class="line">        a[n]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-双路快排"><a href="#2-2-2-双路快排" class="headerlink" title="2.2.2 双路快排"></a>2.2.2 双路快排</h3><figure class="highlight java"><figcaption><span>QuickSort2Ways.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort2Ways</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        quickSort2Ways(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对a[l...r]部分进行快速排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quickSort2Ways</span><span class="params">(T[] a,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> p=partition(a,l,r);</span><br><span class="line">        quickSort2Ways(a,l,p-<span class="number">1</span>);</span><br><span class="line">        quickSort2Ways(a,p+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对a[l...r]部分进行partition操作</span></span><br><span class="line">    <span class="comment">// 返回p,使得a[l...p-1]&lt;=a[p]&lt;=a[p+1...r]</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(T[] a, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=l+(<span class="keyword">int</span>)(Math.random()*(r-l+<span class="number">1</span>));</span><br><span class="line">        swap(a, l, n);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//a[l+1..i)&lt;=v&lt;=a(j...r]</span></span><br><span class="line">        <span class="keyword">int</span> i = l+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> j = r;</span><br><span class="line">        T v = a[l];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i&lt;=r &amp;&amp; a[i].compareTo(v) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (j&gt;=l+<span class="number">1</span> &amp;&amp; a[j].compareTo(v) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;j) <span class="keyword">break</span>;</span><br><span class="line">            swap(a, i, j);</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// a[i]&gt;=v,a[j]&lt;=v   a[l]=v</span></span><br><span class="line">        swap(a, l, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] a,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        T temp=a[m];</span><br><span class="line">        a[m]=a[n];</span><br><span class="line">        a[n]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-三路快排"><a href="#2-2-3-三路快排" class="headerlink" title="2.2.3 三路快排"></a>2.2.3 三路快排</h3><figure class="highlight java"><figcaption><span>QuickSort3Ways.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort3Ways</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        quickSort3Ways(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对a[l...r]部分进行快速排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quickSort3Ways</span><span class="params">(T[] a,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// partition</span></span><br><span class="line">        <span class="keyword">int</span> n=l+(<span class="keyword">int</span>)(Math.random()*(r-l+<span class="number">1</span>));</span><br><span class="line">        swap(a, l, n);</span><br><span class="line">        T v = a[l];</span><br><span class="line">        <span class="keyword">int</span> lt = l; <span class="comment">//a[l+1...lt]&lt;v</span></span><br><span class="line">        <span class="keyword">int</span> gt = r+<span class="number">1</span>; <span class="comment">//a[gt...r]&gt;v</span></span><br><span class="line">        <span class="keyword">int</span> i=l+<span class="number">1</span>; <span class="comment">// a[lt+1...i)==v</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i&lt;gt) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].compareTo(v)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                swap(a,i,lt+<span class="number">1</span>);</span><br><span class="line">                i++;</span><br><span class="line">                lt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i].compareTo(v)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                swap(a,i,gt-<span class="number">1</span>);</span><br><span class="line">                gt--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        swap(a,l,lt);</span><br><span class="line">        lt--;</span><br><span class="line">        quickSort3Ways(a,l,lt);</span><br><span class="line">        quickSort3Ways(a,gt,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] a,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        T temp=a[m];</span><br><span class="line">        a[m]=a[n];</span><br><span class="line">        a[n]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-堆排序-1"><a href="#2-3-堆排序-1" class="headerlink" title=" 2.3 堆排序"></a><span id="2.3"> 2.3 堆排序</span></h2><h3 id="2-3-1-建堆"><a href="#2-3-1-建堆" class="headerlink" title="2.3.1 建堆"></a>2.3.1 建堆</h3><figure class="highlight java"><figcaption><span>MaxHeap.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaxHeap</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;? <span class="title">super</span> <span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> T[] data;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</span><br><span class="line">        data=(T[])<span class="keyword">new</span> Comparable[capacity+<span class="number">1</span>];</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.capacity=capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MaxHeap</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        data=(T[])<span class="keyword">new</span> Comparable[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">this</span>.capacity=n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            data[i+<span class="number">1</span>]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        count=n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=count/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            ShiftDown2(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(T a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> (count+<span class="number">1</span>&lt;=capacity);</span><br><span class="line">        data[++count]=a;</span><br><span class="line">        ShiftUp(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShiftUp</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">1</span> &amp;&amp; data[k/<span class="number">2</span>].compareTo(data[k])&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            swap(k/<span class="number">2</span>,k);</span><br><span class="line">            k/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">extractMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> (count&gt;<span class="number">0</span>);</span><br><span class="line">        T max=data[<span class="number">1</span>];</span><br><span class="line">        swap(<span class="number">1</span>,count);</span><br><span class="line">        count--;</span><br><span class="line">        ShiftDown2(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原始的shiftDown过程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShiftDown</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k&lt;=count)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">2</span>*k; <span class="comment">// data[k]和data[j]交换位置</span></span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=count &amp;&amp; data[j].compareTo(data[j + <span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(data[k].compareTo(data[j])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(k,j);</span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 优化的shiftDown过程, 使用赋值的方式取代不断的swap,</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShiftDown2</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        T e=data[k];</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k&lt;=count)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">2</span>*k; <span class="comment">// data[k]和data[j]交换位置</span></span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=count &amp;&amp; data[j].compareTo(data[j + <span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(e.compareTo(data[j])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            data[k]=data[j];</span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">        data[k]=e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        T temp=data[m];</span><br><span class="line">        data[m]=data[n];</span><br><span class="line">        data[n]=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MaxHeap&lt;Integer&gt; maxHeap=<span class="keyword">new</span> MaxHeap&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">        System.out.println(maxHeap.size());</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">            maxHeap.insert((<span class="keyword">int</span>)(Math.random()*<span class="number">100</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">15</span>;i++)&#123;</span><br><span class="line">            System.out.print(maxHeap.extractMax()+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-2-基本堆排序"><a href="#2-3-2-基本堆排序" class="headerlink" title="2.3.2 基本堆排序"></a>2.3.2 基本堆排序</h3><figure class="highlight java"><figcaption><span>HeapSort1.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort1</span> </span>&#123;</span><br><span class="line"><span class="comment">//    不允许产生任何实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HeapSort1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        MaxHeap&lt;T&gt; maxHeap=<span class="keyword">new</span> MaxHeap&lt;&gt;(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            maxHeap.insert(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">            a[i]=maxHeap.extractMax();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line">        Integer[] arr = SortTestHelper.generateRandomArray(N, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        SortTestHelper.printArray(arr);</span><br><span class="line">        SortTestHelper.testSort(<span class="string">"algorithm.heap.HeapSort1"</span>, arr);</span><br><span class="line">        SortTestHelper.printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-优化堆排序"><a href="#2-3-3-优化堆排序" class="headerlink" title="2.3.3 优化堆排序"></a>2.3.3 优化堆排序</h3><figure class="highlight java"><figcaption><span>HeapSort2.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    不允许产生任何实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HeapSort2</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        MaxHeap&lt;T&gt; maxHeap=<span class="keyword">new</span> MaxHeap&lt;&gt;(a);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">            a[i]=maxHeap.extractMax();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-4-原地堆排序"><a href="#2-3-4-原地堆排序" class="headerlink" title="2.3.4 原地堆排序"></a>2.3.4 原地堆排序</h3><figure class="highlight java"><figcaption><span>HeapSort.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    不允许产生任何实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HeapSort</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(T[] a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n=a.length;</span><br><span class="line">        <span class="comment">// 从第一个非叶子节点开始进行ShiftDown操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(n-<span class="number">1</span>-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            ShiftDown2(a,n,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">            swap(a,<span class="number">0</span>,i);</span><br><span class="line">            ShiftDown2(a,i,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(T[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        T temp=a[i];</span><br><span class="line">        a[i]=a[j];</span><br><span class="line">        a[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShiftDown1</span><span class="params">(T[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k+<span class="number">1</span>&lt;=n-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">2</span>*k+<span class="number">1</span>; <span class="comment">// data[k]和data[j]交换位置</span></span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=n-<span class="number">1</span> &amp;&amp; a[j].compareTo(a[j + <span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[k].compareTo(a[j])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(a,k,j);</span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>&lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ShiftDown2</span><span class="params">(T[] a, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        T e=a[k];</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k+<span class="number">1</span>&lt;=n-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j=<span class="number">2</span>*k+<span class="number">1</span>; <span class="comment">// data[k]和data[j]交换位置</span></span><br><span class="line">            <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=n-<span class="number">1</span> &amp;&amp; a[j].compareTo(a[j + <span class="number">1</span>]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(e.compareTo(a[j])&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a[k]=a[j];</span><br><span class="line">            k=j;</span><br><span class="line">        &#125;</span><br><span class="line">        a[k]=e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-各个排序算法总结-1"><a href="#3-各个排序算法总结-1" class="headerlink" title=" 3. 各个排序算法总结"></a><span id="3"> 3. 各个排序算法总结</span></h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;从基本的O(n^2)时间复杂度的冒泡排序，选择排序，插入排序以及希尔排序到O(nlogn)高级排序算法,归并排序，快速排序，堆排序。分析各个算法的时间复杂度，空间复杂度等，以及适应的场景。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithm" scheme="http://yoursite.com/categories/Algorithm/"/>
    
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础笔记</title>
    <link href="http://yoursite.com/2018/04/20/database/"/>
    <id>http://yoursite.com/2018/04/20/database/</id>
    <published>2018-04-20T12:01:30.000Z</published>
    <updated>2018-06-21T07:00:36.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>慕课网《Google面试官亲授 升级Java面试》视频课程 数据库知识整理笔记</p><a id="more"></a><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="1-数据库概述"><a href="#1-数据库概述" class="headerlink" title="1.数据库概述"></a><a href="#1">1.数据库概述</a></h2><h2 id="2-JOIN-amp-GROUP-BY"><a href="#2-JOIN-amp-GROUP-BY" class="headerlink" title="2.JOIN &amp; GROUP BY"></a><a href="#2">2.JOIN &amp; GROUP BY</a></h2><h2 id="3-事物和乐观锁"><a href="#3-事物和乐观锁" class="headerlink" title="3.事物和乐观锁"></a><a href="#3">3.事物和乐观锁</a></h2><h2 id="4-数据库问题"><a href="#4-数据库问题" class="headerlink" title="4.数据库问题"></a><a href="#4">4.数据库问题</a></h2><hr><h1 id="1-数据库概述-1"><a href="#1-数据库概述-1" class="headerlink" title=" 1. 数据库概述"></a><span id="1"> 1. 数据库概述</span></h1><h2 id="1-1-关系型数据库"><a href="#1-1-关系型数据库" class="headerlink" title="1.1 关系型数据库"></a>1.1 关系型数据库</h2><ul><li><p>基于关系代数理论</p></li><li><p>缺点：表结构不直观，实现复杂，速度慢</p></li><li><p>优点：健壮性高，社区庞大</p></li></ul><h1 id="2-JOIN-amp-GROUP-BY-1"><a href="#2-JOIN-amp-GROUP-BY-1" class="headerlink" title=" 2. JOIN &amp; GROUP BY"></a><span id="2"> 2. JOIN &amp; GROUP BY</span></h1><h3 id="1-2-1-JOIN"><a href="#1-2-1-JOIN" class="headerlink" title="1.2.1 JOIN"></a>1.2.1 JOIN</h3><p><strong>用法：</strong></p><p>table1 <strong>join</strong> table2 (笛卡尔积)</p><p><strong>on</strong> table1.字段=table2.字段 (条件选择)</p><p><strong>功能：</strong></p><p>把来自两个或多个表的行结合起来</p><ul><li><p>外连接  </p><p> left join（左外连接）：结果集包含左表的所有行</p><p> right join(右外连接)：结果集包含右表的所有行</p><p> full join (完整外连接)：结果集包含左表和右表中的所有行</p><p> （null 字段 会显示）</p></li><li><p>内连接  </p><p> join(内连接) :共有的列的值匹配两个表中的行</p><p> （null 字段 不会显示）</p></li><li><p>交叉连接</p><p> 不带on字句</p></li></ul><blockquote><p><strong>on 条件</strong>：过滤两个连接表笛卡尔积形成中间表</p></blockquote><blockquote><p><strong>where条件</strong>：提取那些满足指定标准的记录</p></blockquote><h3 id="1-2-2-GROUP-BY"><a href="#1-2-2-GROUP-BY" class="headerlink" title="1.2.2 GROUP BY"></a>1.2.2 GROUP BY</h3><p><strong>用法：</strong></p><p>GROUP BY 字段:结合聚合函数 根据字段值分组（根据字段分组）</p><p><strong>功能：</strong></p><p>结合聚合函数，根据一个或多个列对结果集进行分组。</p><ul><li><p>聚合函数</p><p>  count、sum、max、min、avg…</p><p>  select 后 + count（*）、min(字段)    新增属性</p></li><li><p>子查询(嵌套SELECT语句)</p><p>  可以在SELECT，INSERT，UPDATE使用,返回将被用于在主查询作为条件的数据，以进一步限制要检索的数据</p></li></ul><h1 id="3-事物和乐观锁-1"><a href="#3-事物和乐观锁-1" class="headerlink" title=" 3. 事物和乐观锁"></a><span id="3"> 3. 事物和乐观锁</span></h1><h2 id="2-1-事物的特性"><a href="#2-1-事物的特性" class="headerlink" title="2.1 事物的特性"></a>2.1 事物的特性</h2><p>ACID</p><ul><li><p>Atomicity</p><p>  事物要么不做 要么做完</p></li><li><p>Consistency 约束</p><p>  事物满足的约束</p></li><li><p>Isolation</p><p>  不同事物之间的独立性</p></li><li><p>Durability</p><p>  事物结果的持续性</p></li></ul><h2 id="2-2-事物的隔离级别"><a href="#2-2-事物的隔离级别" class="headerlink" title="2.2 事物的隔离级别"></a>2.2 事物的隔离级别</h2><ul><li><p>Read uncommitted</p><p>  未committed时 数据就可读取更新值    </p></li><li><p>Read Committed</p><p>  只有committed 之后 数据才会更新</p></li><li><p>Reapeatable Reads</p><p>  在transaction 事物开始阶段读到的值为准  不管别的事物是否改变这个值 </p></li><li><p>Serializable</p><p>  其他事物进行数据update时  其他事物无法进行update </p></li></ul><p>一般情况下，隔离级别不需要那么高 。 比如在Read Committed下 ,读上加锁：<strong>select</strong> 后加 <strong>for update</strong>  加锁 （悲观锁）</p><p><strong>缺点：</strong>系统开销大，浪费资源，由此引入乐观锁。</p><h2 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title=" 3. 乐观锁"></a><span id="3"> 3. 乐观锁</span></h2><p>不加transaction保护，而是加版本保护</p><p><strong>update</strong> ‘表名’ <strong>set</strong> ‘属性名’=？ <strong>where</strong>  条件=？ <strong>and</strong> ‘属性名’=？(版本保护)</p><p>乐观锁演示</p><ul><li>读取数据 ，记录Timestamp（某个属性值）</li><li>修改数据</li><li>检查和提交数据</li></ul><p>适用冲突不多的情况（因为数据库读取比较慢）</p><h2 id="4-数据库的常见问题"><a href="#4-数据库的常见问题" class="headerlink" title=" 4. 数据库的常见问题"></a><span id="4"> 4. 数据库的常见问题</span></h2><ul><li><p>介绍关系数据库的理论基础</p><p>  关系代数 ：1-5 范式</p></li><li><p>给定场景，设计表结构</p><p>  2范式：有主键 </p><p>  3范式：不能有传递依赖 (非主键字段之间不能有传递依赖)</p></li><li><p>给定表结构，按要求写SQL语句</p><p>  参考前面sql语句</p></li><li><p>事物的ACID属性？哪些隔离级别？</p></li><li><p>事物性能太慢怎么办？</p><p>  考虑使用乐观锁</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;慕课网《Google面试官亲授 升级Java面试》视频课程 数据库知识整理笔记&lt;/p&gt;
    
    </summary>
    
      <category term="Database" scheme="http://yoursite.com/categories/Database/"/>
    
    
      <category term="Database" scheme="http://yoursite.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>MVC设计模式</title>
    <link href="http://yoursite.com/2018/04/02/mvc/"/>
    <id>http://yoursite.com/2018/04/02/mvc/</id>
    <published>2018-04-02T09:04:07.000Z</published>
    <updated>2018-04-02T16:11:23.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MVC简介"><a href="#MVC简介" class="headerlink" title="MVC简介"></a>MVC简介</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>随着应用系统的逐步增大，系统的业务逻辑复杂度正在呈现几何级数式增长，在这种情况下，采取传统的开发方法，讲系统的所有处理逻辑都放在JSP页面中，那将是程序员的一种噩梦。而MVC思想的出现给程序员带来了福音。</p><a id="more"></a><h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>MVC(Model、View、Control)是软件开发过程中比较流行的设计思想。在了解MVC之前，首先应明确一点，MVC是一种设计模式（设计思想），并不是一种编程技术。</p><p>MVC思想是将系统各个组件进行分类，不同组件扮演不同角色，然后将系统中的组件分隔到不同层中，组件被限制在其所在层，保证良好的封装性，MVC各层功能如下</p><ul><li><p><strong>模型（Model）层</strong>：实现系统业务逻辑</p></li><li><p><strong>视图（View）层</strong>    ：用于与用户交互</p></li><li><p><strong>控制（Control）层</strong>：是Model和View之间沟通的桥梁</p></li></ul><p>这三层将整个业务应用划分为三层架构(3-tier architecture) ，即表现层（UI）、业务逻辑层（BLL）、数据访问层(DAL)。</p><pre><code>1. 表现层（UI）</code></pre><p>   通俗讲就是展现给用户的界面，即用户在使用一个系统时的所见所得。</p><pre><code>2. 业务逻辑层（BLL）</code></pre><p>   针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑的处理。</p><pre><code>3. 数据访问层(DAL）</code></pre><p>   直接操作数据库，包括对数据的增、删、改、查等。</p><h3 id="MVC与三层结构的区别"><a href="#MVC与三层结构的区别" class="headerlink" title="MVC与三层结构的区别"></a>MVC与三层结构的区别</h3><p>网上有一个很流行的例子，可以了解二者之间的区别。A在上海的浦东区逛街，有人要抢劫他，打110报警了，B在闵行区也被劫持，他也打110报警了，他们打110的时候，接电话的是上海市公安局总部指挥中心，对于A，来解救他是浦东分局的警察，对于B，解救他的是闵行分局的警察，对于AB来说，他们不需要关心到底是谁来解救他的，他们只管打110报警（类似于页面数据由action提交到控制器），由110指挥中心确定他的位置然后派出具体的地方警局去营救（控制器根据需求调用model层去完成对应的数据处理）。而三层架构在这个过程中就像A或B被劫持了，他们直接找到当地警（调用BLL层方法）的警察来处理</p><h3 id="MVC特点"><a href="#MVC特点" class="headerlink" title="MVC特点"></a>MVC特点</h3><blockquote><p>（1）低耦合性</p></blockquote><p>   首先，视图层和业务层的分离使得视图层代码和模型与控制器代码相分离。其次，因为模型与控制器和视图相分离，很容易改变应用程序的数据层和业务规则，从而降低层与层之间的耦合，提高了程序的可扩展性，有助于程序员灵活地进行编程</p><blockquote><p>（2）可维护性高</p></blockquote><p>   模型、控制器与视图相分离，使得一个模型能对应多个视图，提高代码可维护性，一旦模型发生变化，方便维护。</p><blockquote><p>（3）成本低，部署快</p></blockquote><p>   MVC使开发和维护用户和接口的技术含量降低，使用MVC模式使开发时间大大缩减，使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HML和JSP开发人员）集中精力于表现形式</p><blockquote><p>（4）有利于工程化管理</p></blockquote><p>   MVC将不同模型和不同视图组合一起进行管理，层与层分离，各层有自己特色，各层只负责自己的任务，不用管其它层业务，代码可以复用，缩短软件开发周期</p><h2 id="JSP-Model1-和-JSP-Model2"><a href="#JSP-Model1-和-JSP-Model2" class="headerlink" title="JSP Model1 和 JSP Model2"></a>JSP Model1 和 JSP Model2</h2><p>对于Java阵营的动态Web编程技术而言，经历了所谓的Model 1和Model 2时代。</p><h3 id="JSP-Model1"><a href="#JSP-Model1" class="headerlink" title="JSP Model1"></a>JSP Model1</h3><p>使用JSP Model1模式开发的Web项目都是由JSP页面构成。JSP页面既要负责显示还要负责控制，将控制逻辑和表现逻辑混在一起了。</p><p>优点：</p><ul><li>开发比较简单和方便，非常适合小型Web项目的快速开发</li><li>对于JAva Web开发人员的技术水平要求不高</li></ul><p>缺点：</p><ul><li>重用性低，功能相似代码只能复制，不能直接调用</li><li>可扩展性低，如果以后想给程序扩展功能，将是非常困难的</li></ul><p>传统的JSP Model1模型中，JSP是独立的，并自主完成所有任务，如图1-1所示<br><img src="http://onh9j7vum.bkt.clouddn.com/image/18_4_2/model1_1.png" alt="传统JSP Model1 模型"></p><p>改进的JSP Model1模型中，JSP页面与JavaBean共同完成任务，如图1-2所示<br><img src="http://onh9j7vum.bkt.clouddn.com/image/18_4_2/model1_2.png" alt="改进的JSP Model1 模型"></p><h3 id="JSP-Model2"><a href="#JSP-Model2" class="headerlink" title="JSP Model2"></a>JSP Model2</h3><p>JSP Model2是基于MVC架构的设计模式，使用了JSP、Servelt、JavaBean三种技术</p><ul><li>JavaBean 充当模型（M）,负责业务逻辑以及对数据库的操作</li><li>JSP 只负责显示（V），生成动态网页</li><li>Servelt 充当控制器(C)，用来处理各种请求的分派</li></ul><p><strong>交互过程：</strong></p><p>用户提交页面给JSP页面，JSP接收用户提交的值并通过JavaBean连接数据库并操作数据库，然后将结果返回给用户，JSP Model2 模型如图1-3所示<br><img src="http://onh9j7vum.bkt.clouddn.com/image/18_4_2/model2.png" alt="JSP Model2 模型"></p><p>优点：</p><ul><li>适合多人合作开发大型的Web项目</li><li>有利于组件的重用</li><li>有利于开发中的分工</li></ul><p>缺点：</p><ul><li>Web项目的开发难度加大，同时对开发人员的技术要求也提高了</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MVC简介&quot;&gt;&lt;a href=&quot;#MVC简介&quot; class=&quot;headerlink&quot; title=&quot;MVC简介&quot;&gt;&lt;/a&gt;MVC简介&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;随着应用系统的逐步增大，系统的业务逻辑复杂度正在呈现几何级数式增长，在这种情况下，采取传统的开发方法，讲系统的所有处理逻辑都放在JSP页面中，那将是程序员的一种噩梦。而MVC思想的出现给程序员带来了福音。&lt;/p&gt;
    
    </summary>
    
      <category term="Java Web" scheme="http://yoursite.com/categories/Java-Web/"/>
    
    
      <category term="MVC" scheme="http://yoursite.com/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Chinese Text Detection and Recognition</title>
    <link href="http://yoursite.com/2018/03/16/2017-03-06/"/>
    <id>http://yoursite.com/2018/03/16/2017-03-06/</id>
    <published>2018-03-16T11:44:19.335Z</published>
    <updated>2018-03-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction-to-Chinese-Text-Detection-and-Recognition"><a href="#Introduction-to-Chinese-Text-Detection-and-Recognition" class="headerlink" title="Introduction to Chinese Text Detection and Recognition"></a>Introduction to Chinese Text Detection and Recognition</h2><div align="center">2017.03.27</div><p>Text detection in natural scene environment plays an important role in many computer vision applications.While existing text detection methods are focused on English characters,there is strong application demands on text detection in otherlanguages, such as Chinese.</p><p>As Chinese characters are much more complex than English characters, innovative and more efficient text detection techniques are required for Chinese texts</p><p>This week,Our group create the website and read some relevant papers to make a better understanding of our group project</p><hr><h2 id="Overview-of-Chinese-Text-Detection-and-Recognition"><a href="#Overview-of-Chinese-Text-Detection-and-Recognition" class="headerlink" title="Overview of Chinese Text Detection and Recognition"></a>Overview of Chinese Text Detection and Recognition</h2><p>This week ,we have read some of papers that refer to chinese text detection.The one that interested us most   is a paper titled A Convolutional Neural Network-Based Chinese Text Detection Algorithm via text Struture Modeling. This paper presents a novel text detection algorithm for Chinese character based on a specific designed convolutional neural network(CNN).</p><p><img src="http://onh9j7vum.bkt.clouddn.com/1.jpg" alt="fig 1-流程图"></p><p>The CNN contains a text structure component detector layer,a spatial pyramid layer,and a multi-input-layer deep belief network(DBN).The CNN is pre-trained via a convolutional sparse auto-encoder,specifically designed for extracting complex features from chinese characters.In particular, the text structure component detectors enhance the accuracy and uniqueness of feature descriptors by extracting multiple text structure components in various ways. The spatial pyramid layer enhances the scale invariability of the CNN for detecting texts in multiple scales.Finally, the multi-input-layer DBN replaces the full connected layers in the CNN to ensure features from multiple scales are comparable.  </p><p><img src="http://onh9j7vum.bkt.clouddn.com/2.png" alt="fig 2"></p><p>The first novel point is Chinese text structure feature extracter, which is a special layer in CNN called text structure component detector(TSCD) layer.By analysizing the structures of Chinese characters, the Chinese text structure component types can be effectively classified to several easily distinguishable groups based on their aspect ratios, For each text structure component group,a special TSCD is designed to extract its feature , which has its unique feature map shape.</p><p><img src="http://onh9j7vum.bkt.clouddn.com/4.png" alt="fig 3-算法"></p><p>An unsupervised learning method,named convolutional spparse auto-encoder(CSAE),for complex and abstract Chinese texts.AS the availability of public scene Chinese text datasets is very limited, applying an unsupervised learning method to pretrain a CNN model is important in avoiding overfitting.  </p><p>The third contribution is on the application of a spatial pyramid layer(SPL) and designing a multi-input-layer deep belief network(DBN) as the fully connected layer in the model. The SPL improves the scale invariability of CNN, which is vital to detect various scale texts in natural.With the multi-input-layer DBN, the scale features extracted by SPL and the text features extracted by TSCD can be combined effctively.   </p><hr><h2 id="HDevelop-based-Chinese-Text-Detection-and-Recognition"><a href="#HDevelop-based-Chinese-Text-Detection-and-Recognition" class="headerlink" title="HDevelop-based Chinese Text Detection and Recognition"></a>HDevelop-based Chinese Text Detection and Recognition</h2><div align="center">2017.04.03</div><p>本周，我们利用HDevelop的软件实现了近一千种中文文字识别，在训练库中每个汉字有10种字体以提升识别精度。我们的算法处理过程主要包括图像灰度化、二值化、膨胀以及腐蚀。</p><p>我们的实验表明对于纯文本图像的识别精度较高，但对自然背景下包含文本的图像识别精度就很差，原因是膨胀腐蚀算法对于含有背景噪声的文字区域提取不准确。</p><p>我们下一步打算对图像先进行文字区域提取，然后对其进行膨胀腐蚀运算。</p><p>下图是我们对纯文本图像的识别结果，图中的四个汉字都能识别出来</p><div align="center"><img src="http://onh9j7vum.bkt.clouddn.com/5.1.png" width="50%" height="50%"></div><p>由于字体的差异性，当我们对某些汉字，如汉字“一”，进行识别时，却识别为“人”字。</p><div align="center"><img src="http://onh9j7vum.bkt.clouddn.com/6_1.png" width="50%" height="50%"></div><p>我们分析可能是由于“一”字最后收尾的一笔，对识别可能会有影响。于是，我们在训练库中新增了几种字体，汉字“一”被正确识别出来了，我们实验结果表明，训练库中字体的数目的增加会提高识别精度。</p><div align="center"><img src="http://onh9j7vum.bkt.clouddn.com/7_1.jpg" width="50%" height="40%"></div><hr><div align="center">2017.04.10</div><p>本周，我们扩充训练库至2500个汉字，之前利用的SVM的分类方法的识别效果如下图</p><div align="center"><img src="http://onh9j7vum.bkt.clouddn.com/8_1.jpg" width="30%" height="30%"></div><p>由于训练库中只包含图像中6个汉字，导致识别效果较差，下图是对另外一幅图像中的文字进行识别的结果</p><div align="center"><img src="http://onh9j7vum.bkt.clouddn.com/8_2.jpg" width="30%" height="30%"></div><p>由于对英文没进行训练，英文全部识别错误。在汉字中，由于中文结构的复杂性，有时会把左右或者上下结构的汉字识别为多个汉字，比如上图中的“你”和“总”，还有对于形近字也容易识别错误，如把“全”识别为“金”。</p><p>后来，我们利用KNN的方法重新对中文汉字进行识别，提高了一定的识别准确性，如下图所示，对第一幅图进行识别，8个字识别出了7个字。</p><p><img src="http://onh9j7vum.bkt.clouddn.com/9.jpg" alt="fig 10"></p><p><strong> 总结：我们的中文文本检测与识别都是基于白底黑字的图像进行检测识别，这离实际的运用还有很大的差距，但通过这些简单的图像中的汉字识别，我们熟悉了基本图像处理的流程及一些相关的算法。能够把课堂上学到的知识运用到实践中，这应该是我们学习图像分析与理解最大的收获吧!</strong></p><h2 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h2><p><a href="[http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=7733055]">[1] A Convolutional Neural Network Based Chinese Text Detection Algorithm via Text Structure Modeling, In TMM 2016.</a><br><a href="https://arxiv.org/pdf/1604.01891.pdf" target="_blank" rel="noopener">[2] A CNN Based Scene Chinese Text Recognition Algorithm With Synthetic Data Engine, In cs.CV, 2016.</a></p><h2 id="Group-Member"><a href="#Group-Member" class="headerlink" title="Group Member:"></a>Group Member:</h2><p>周健 杨田野 罗曼 易俊 </p><h2 id="Group-Project"><a href="#Group-Project" class="headerlink" title="Group Project:"></a>Group Project:</h2><p>Chinese Text Detection and Recognition                                    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction-to-Chinese-Text-Detection-and-Recognition&quot;&gt;&lt;a href=&quot;#Introduction-to-Chinese-Text-Detection-and-Recognition&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="Demo" scheme="http://yoursite.com/categories/Demo/"/>
    
    
      <category term="homework" scheme="http://yoursite.com/tags/homework/"/>
    
  </entry>
  
</feed>
