<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[排序算法总结(Java语言版)]]></title>
    <url>%2F2018%2F06%2F21%2FSortAlgorithm%2F</url>
    <content type="text"><![CDATA[简介从基本的O(n^2)时间复杂度的冒泡排序，选择排序，插入排序以及希尔排序到O(nlogn)高级排序算法,归并排序，快速排序，堆排序。分析各个算法的时间复杂度，空间复杂度等，以及适应的场景。 目录1.基本排序算法1.1 冒泡排序1.2 选择排序1.3 插入排序1.4 希尔排序2.高级排序算法2.1 归并排序2.2 快速排序2.3 堆排序3.各个排序算法总结 1. 基本排序算法 1.1 冒泡排序Bubble.java1234567891011121314151617181920public class BubbleSort &#123; public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; for(int i=0;i&lt;n-1;i++)&#123; for(int j=1;j&lt;n-i;j++)&#123; if(a[j].compareTo(a[j-1])&lt;0)&#123; swap(a,j-1, j); &#125; &#125; &#125; &#125; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void swap(T[] a,int m,int n)&#123; T temp=a[m]; a[m]=a[n]; a[n]=temp; &#125;&#125; 1.2 选择排序SelectionSort.java1234567891011121314151617181920public class SelectionSort &#123; public static void sort(Comparable[] arr)&#123; int n=arr.length; for(int i=0;i&lt;n-1;i++)&#123; int minIndex=i; for(int j=i+1;j&lt;n;j++)&#123; if(arr[j].compareTo(arr[minIndex])&lt;0)&#123; minIndex=j; &#125; &#125; swap(arr,i,minIndex); &#125; &#125; private static void swap(Comparable[] arr, int i, int j) &#123; Comparable t = arr[i]; arr[i] = arr[j]; arr[j] = t; &#125;&#125; 1.3 插入排序InsertionSort.java1234567891011121314public class InsertionSort &#123; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; int j; for(int i=0;i&lt;n;i++)&#123; T temp=a[i]; for( j=i;j&gt;0&amp;&amp;temp.compareTo(a[j-1])&lt;0;j--)&#123; a[j]=a[j-1]; &#125; a[j]=temp; &#125; &#125;&#125; 1.4 希尔排序ShellSort.java1234567891011121314151617public class ShellSort &#123; public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; int j; // 希尔增量 for(int gap=n/2;gap&gt;0;gap/=2)&#123; for(int i=gap;i&lt;n;i++)&#123; T temp=a[i]; for(j=i;j&gt;=gap &amp;&amp; temp.compareTo(a[j-gap])&lt;0;j-=gap)&#123; a[j]=a[j-gap]; &#125; a[j]=temp; &#125; &#125; &#125;&#125; 2. 高级排序算法 2.1 归并排序2.1.1 自顶向下的归并排序（递归实现）MergeSort.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758import java.util.Arrays;public class MergeSort &#123; public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; T [] temp=(T[]) new Comparable[n]; mergeSort(a,temp,0,n-1); &#125; private static&lt;T extends Comparable&lt;? super T&gt;&gt; void mergeSort(T[] a, T[] temp, int l, int r) &#123; // 可优化 ，小数据进行插入排序 if(l&lt;r) &#123; int mid = l + (r - l) / 2; mergeSort(a, temp, l, mid); mergeSort(a, temp, mid + 1, r); // 近乎有序时 能优化 // 如果已经有序，不进行merge if(a[mid].compareTo(a[mid+1])&gt;0) &#123; merge(a, temp, l, mid + 1, r); &#125; &#125; &#125; private static&lt;T extends Comparable&lt;? super T&gt;&gt; void merge(T[] a, T[] temp, int leftPos, int rightPos,int rightEnd) &#123; int leftEnd=rightPos-1; // the end pos of left arr int tmpPos=leftPos; // current pos of merge arr int numElements=rightEnd-leftPos+1; // the number of elements of merge arr // main loop // the left and right arr are both incompletely sorted while(leftPos&lt;=leftEnd &amp;&amp; rightPos&lt;=rightEnd)&#123; if(a[leftPos].compareTo(a[rightPos])&lt;=0)&#123; temp[tmpPos++]=a[leftPos++]; &#125; else&#123; temp[tmpPos++]=a[rightPos++]; &#125; &#125; // the left arr is incompletely sorted while (leftPos&lt;=leftEnd)&#123; temp[tmpPos++]=a[leftPos++]; &#125; // the right arr is incompletely sorted while (rightPos&lt;=rightEnd)&#123; temp[tmpPos++]=a[rightPos++]; &#125; // copy the elements of temp arr to a for(int i=0;i&lt;numElements;i++,rightEnd--)&#123; a[rightEnd]=temp[rightEnd]; &#125; &#125;&#125; 2.1.2 自底向上的归并排序（非递归实现）MergeSortBU.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class MergeSortBU &#123; public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; T [] temp=(T[]) new Comparable[n]; // 可优化 ，小数据进行插入排序 // sz 从某一个数起 for(int sz=1;sz&lt;n;sz*=2)&#123; for(int i=0;i&lt;n-sz;i+=2*sz)&#123; // 如果已经有序，不进行merge if(a[i + sz-1].compareTo(a[i+sz])&gt;0) &#123; merge(a, temp, i, i + sz, Math.min(i + 2 * sz - 1, n - 1)); &#125; &#125; &#125; &#125; private static&lt;T extends Comparable&lt;? super T&gt;&gt; void merge(T[] a, T[] temp, int leftPos, int rightPos,int rightEnd) &#123; int leftEnd=rightPos-1; // the end pos of left arr int tmpPos=leftPos; // current pos of merge arr int numElements=rightEnd-leftPos+1; // the number of elements of merge arr // main loop // the left and right arr are both incompletely sorted while(leftPos&lt;=leftEnd &amp;&amp; rightPos&lt;=rightEnd)&#123; if(a[leftPos].compareTo(a[rightPos])&lt;=0)&#123; temp[tmpPos++]=a[leftPos++]; &#125; else&#123; temp[tmpPos++]=a[rightPos++]; &#125; &#125; // the left arr is incompletely sorted while (leftPos&lt;=leftEnd)&#123; temp[tmpPos++]=a[leftPos++]; &#125; // the right arr is incompletely sorted while (rightPos&lt;=rightEnd)&#123; temp[tmpPos++]=a[rightPos++]; &#125; // copy the elements of temp arr to a for(int i=0;i&lt;numElements;i++,rightEnd--)&#123; a[rightEnd]=temp[rightEnd]; &#125; &#125;&#125; 2.1.3 基于链表的归并排序MergeSortList.java123456789101112131415161718192021222324252627282930313233343536373839404142434445public class MergeSortList &#123; public static&lt;T extends Comparable&lt;? super T&gt;&gt; ListNode&lt;T&gt; sort(ListNode&lt;T&gt; head)&#123; if(head==null || head.getNext()==null)&#123; return head; &#125; ListNode p1=head; // locate the half of the list ListNode p2=head.getNext(); while(p2!=null &amp;&amp; p2.getNext()!=null)&#123; p1=p1.getNext(); p2=p2.getNext().getNext(); &#125; // the right half list ListNode&lt;T&gt; r=sort(p1.getNext()); // cut off the list p1.setNext(null); // the left half list ListNode&lt;T&gt; l=sort(head); return merge(l,r); &#125; private static &lt;T extends Comparable&lt;? super T&gt;&gt; ListNode&lt;T&gt; merge(ListNode&lt;T&gt; l, ListNode&lt;T&gt; r) &#123; while(l!=null &amp;&amp; r!=null)&#123; if (l.getVal().compareTo(r.getVal())&lt;=0)&#123; l.setNext(merge(l.getNext(),r)); return l; &#125; else&#123; r.setNext(merge(l,r.getNext())); return r; &#125; &#125; if (l==null) return r; return l; &#125;&#125; MergeSortList.java123456789101112131415161718192021222324252627282930313233343536373839404142434445public class MergeSortList &#123; public static&lt;T extends Comparable&lt;? super T&gt;&gt; ListNode&lt;T&gt; sort(ListNode&lt;T&gt; head)&#123; if(head==null || head.getNext()==null)&#123; return head; &#125; ListNode p1=head; // locate the half of the list ListNode p2=head.getNext(); while(p2!=null &amp;&amp; p2.getNext()!=null)&#123; p1=p1.getNext(); p2=p2.getNext().getNext(); &#125; // the right half list ListNode&lt;T&gt; r=sort(p1.getNext()); // cut off the list p1.setNext(null); // the left half list ListNode&lt;T&gt; l=sort(head); return merge(l,r); &#125; private static &lt;T extends Comparable&lt;? super T&gt;&gt; ListNode&lt;T&gt; merge(ListNode&lt;T&gt; l, ListNode&lt;T&gt; r) &#123; while(l!=null &amp;&amp; r!=null)&#123; if (l.getVal().compareTo(r.getVal())&lt;=0)&#123; l.setNext(merge(l.getNext(),r)); return l; &#125; else&#123; r.setNext(merge(l,r.getNext())); return r; &#125; &#125; if (l==null) return r; return l; &#125;&#125; 2.2 快速排序2.2.1 单路快排QuickSort.java123456789101112131415161718192021222324252627282930313233343536373839404142public class QuickSort &#123; public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; quickSort(a,0,a.length-1); &#125; // 对a[l...r]部分进行快速排序 private static &lt;T extends Comparable&lt;? super T&gt;&gt; void quickSort(T[] a,int l,int r)&#123; if(l&gt;=r) return; int p=partition(a,l,r); quickSort(a,l,p-1); quickSort(a,p+1,r); &#125; // 对a[l...r]部分进行partition操作 // 返回p,使得a[l...p-1]&lt;a[p]&lt;=a[p+1...r] private static &lt;T extends Comparable&lt;? super T&gt;&gt; int partition(T[] a, int l, int r) &#123; int n=l+(int)(Math.random()*(r-l+1)); swap(a,l,n); T v=a[l]; // a[l+1...j]&lt;v&lt;a[j+1...i) int j=l; for(int i=l+1;i&lt;=r;i++)&#123; if(a[i].compareTo(v)&lt;0)&#123; swap(a,i,j+1); j++; &#125; &#125; swap(a,l,j); return j; &#125; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void swap(T[] a,int m,int n)&#123; T temp=a[m]; a[m]=a[n]; a[n]=temp; &#125;&#125; 2.2.2 双路快排QuickSort2Ways.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class QuickSort2Ways &#123; public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; quickSort2Ways(a,0,a.length-1); &#125; // 对a[l...r]部分进行快速排序 private static &lt;T extends Comparable&lt;? super T&gt;&gt; void quickSort2Ways(T[] a,int l,int r)&#123; if(l&gt;=r) return; int p=partition(a,l,r); quickSort2Ways(a,l,p-1); quickSort2Ways(a,p+1,r); &#125; // 对a[l...r]部分进行partition操作 // 返回p,使得a[l...p-1]&lt;=a[p]&lt;=a[p+1...r] private static &lt;T extends Comparable&lt;? super T&gt;&gt; int partition(T[] a, int l, int r) &#123; int n=l+(int)(Math.random()*(r-l+1)); swap(a, l, n); //a[l+1..i)&lt;=v&lt;=a(j...r] int i = l+1; int j = r; T v = a[l]; while (true) &#123; while (i&lt;=r &amp;&amp; a[i].compareTo(v) &lt; 0) &#123; i++; &#125; while (j&gt;=l+1 &amp;&amp; a[j].compareTo(v) &gt; 0) &#123; j--; &#125; if(i&gt;j) break; swap(a, i, j); i++; j--; &#125; // a[i]&gt;=v,a[j]&lt;=v a[l]=v swap(a, l, j); return j; &#125; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void swap(T[] a,int m,int n)&#123; T temp=a[m]; a[m]=a[n]; a[n]=temp; &#125;&#125; 2.2.3 三路快排QuickSort3Ways.java1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class QuickSort3Ways &#123; public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; quickSort3Ways(a,0,a.length-1); &#125; // 对a[l...r]部分进行快速排序 private static &lt;T extends Comparable&lt;? super T&gt;&gt; void quickSort3Ways(T[] a,int l,int r)&#123; if(l&gt;=r) return; // partition int n=l+(int)(Math.random()*(r-l+1)); swap(a, l, n); T v = a[l]; int lt = l; //a[l+1...lt]&lt;v int gt = r+1; //a[gt...r]&gt;v int i=l+1; // a[lt+1...i)==v while (i&lt;gt) &#123; if(a[i].compareTo(v)&lt;0)&#123; swap(a,i,lt+1); i++; lt++; &#125; else if(a[i].compareTo(v)&gt;0)&#123; swap(a,i,gt-1); gt--; &#125; else&#123; i++; &#125; &#125; // swap(a,l,lt); lt--; quickSort3Ways(a,l,lt); quickSort3Ways(a,gt,r); &#125; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void swap(T[] a,int m,int n)&#123; T temp=a[m]; a[m]=a[n]; a[n]=temp; &#125;&#125; 2.3 堆排序2.3.1 建堆MaxHeap.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104public class MaxHeap &lt;T extends Comparable&lt;? super T&gt;&gt; &#123; protected T[] data; protected int count; protected int capacity; public MaxHeap(int capacity)&#123; data=(T[])new Comparable[capacity+1]; count=0; this.capacity=capacity; &#125; public MaxHeap(T[] a)&#123; int n=a.length; data=(T[])new Comparable[n+1]; this.capacity=n; for (int i=0;i&lt;n;i++)&#123; data[i+1]=a[i]; &#125; count=n; for(int i=count/2;i&gt;0;i--)&#123; ShiftDown2(i); &#125; &#125; public int size()&#123; return count; &#125; public boolean isEmpty()&#123; return count==0; &#125; public void insert(T a)&#123; assert (count+1&lt;=capacity); data[++count]=a; ShiftUp(count); &#125; private void ShiftUp(int k) &#123; while(k&gt;1 &amp;&amp; data[k/2].compareTo(data[k])&lt;0)&#123; swap(k/2,k); k/=2; &#125; &#125; public T extractMax()&#123; assert (count&gt;0); T max=data[1]; swap(1,count); count--; ShiftDown2(1); return max; &#125; // 原始的shiftDown过程 private void ShiftDown(int k) &#123; while(2*k&lt;=count)&#123; int j=2*k; // data[k]和data[j]交换位置 if(j+1&lt;=count &amp;&amp; data[j].compareTo(data[j + 1]) &lt; 0) &#123; j++; &#125; if(data[k].compareTo(data[j])&gt;0)&#123; break; &#125; swap(k,j); k=j; &#125; &#125;// 优化的shiftDown过程, 使用赋值的方式取代不断的swap, private void ShiftDown2(int k) &#123; T e=data[k]; while(2*k&lt;=count)&#123; int j=2*k; // data[k]和data[j]交换位置 if(j+1&lt;=count &amp;&amp; data[j].compareTo(data[j + 1]) &lt; 0) &#123; j++; &#125; if(e.compareTo(data[j])&gt;0)&#123; break; &#125; data[k]=data[j]; k=j; &#125; data[k]=e; &#125; private void swap(int m,int n)&#123; T temp=data[m]; data[m]=data[n]; data[n]=temp; &#125; public static void main(String[] args)&#123; MaxHeap&lt;Integer&gt; maxHeap=new MaxHeap&lt;&gt;(100); System.out.println(maxHeap.size()); for(int i=0;i&lt;15;i++)&#123; maxHeap.insert((int)(Math.random()*100)); &#125; for(int i=0;i&lt;15;i++)&#123; System.out.print(maxHeap.extractMax()+" "); &#125; System.out.println();&#125; 2.3.2 基本堆排序HeapSort1.java123456789101112131415161718192021222324252627public class HeapSort1 &#123;// 不允许产生任何实例 private HeapSort1()&#123;&#125; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; MaxHeap&lt;T&gt; maxHeap=new MaxHeap&lt;&gt;(n); for(int i=0;i&lt;n;i++) &#123; maxHeap.insert(a[i]); &#125; for(int i=n-1;i&gt;=0;i--) &#123; a[i]=maxHeap.extractMax(); &#125; &#125; public static void main(String[] args)&#123; int N = 100; Integer[] arr = SortTestHelper.generateRandomArray(N, 0, 100); SortTestHelper.printArray(arr); SortTestHelper.testSort("algorithm.heap.HeapSort1", arr); SortTestHelper.printArray(arr); &#125;&#125; 2.3.3 优化堆排序HeapSort2.java12345678910111213141516public class HeapSort2 &#123; // 不允许产生任何实例 private HeapSort2()&#123;&#125; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; MaxHeap&lt;T&gt; maxHeap=new MaxHeap&lt;&gt;(a); for(int i=n-1;i&gt;=0;i--) &#123; a[i]=maxHeap.extractMax(); &#125; &#125;&#125; 2.3.4 原地堆排序HeapSort.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class HeapSort &#123; // 不允许产生任何实例 private HeapSort()&#123;&#125; public static&lt;T extends Comparable&lt;? super T&gt;&gt; void sort(T[] a)&#123; int n=a.length; // 从第一个非叶子节点开始进行ShiftDown操作 for(int i=(n-1-1)/2;i&gt;=0;i--)&#123; ShiftDown2(a,n,i); &#125; for(int i=n-1;i&gt;0;i--)&#123; swap(a,0,i); ShiftDown2(a,i,0); &#125; &#125; private static&lt;T extends Comparable&lt;? super T&gt;&gt; void swap(T[] a, int i, int j) &#123; T temp=a[i]; a[i]=a[j]; a[j]=temp; &#125; private static&lt;T extends Comparable&lt;? super T&gt;&gt; void ShiftDown1(T[] a, int n, int k) &#123; while(2*k+1&lt;=n-1)&#123; int j=2*k+1; // data[k]和data[j]交换位置 if(j+1&lt;=n-1 &amp;&amp; a[j].compareTo(a[j + 1]) &lt; 0) &#123; j++; &#125; if(a[k].compareTo(a[j])&gt;0)&#123; break; &#125; swap(a,k,j); k=j; &#125; &#125; private static&lt;T extends Comparable&lt;? super T&gt;&gt; void ShiftDown2(T[] a, int n, int k) &#123; T e=a[k]; while(2*k+1&lt;=n-1)&#123; int j=2*k+1; // data[k]和data[j]交换位置 if(j+1&lt;=n-1 &amp;&amp; a[j].compareTo(a[j + 1]) &lt; 0) &#123; j++; &#125; if(e.compareTo(a[j])&gt;0)&#123; break; &#125; a[k]=a[j]; k=j; &#125; a[k]=e; &#125;&#125; 3. 各个排序算法总结]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库基础笔记]]></title>
    <url>%2F2018%2F04%2F20%2Fdatabase%2F</url>
    <content type="text"><![CDATA[简介慕课网《Google面试官亲授 升级Java面试》视频课程 数据库知识整理笔记 目录1.数据库概述2.JOIN &amp; GROUP BY3.事物和乐观锁4.数据库问题 1. 数据库概述1.1 关系型数据库 基于关系代数理论 缺点：表结构不直观，实现复杂，速度慢 优点：健壮性高，社区庞大 2. JOIN &amp; GROUP BY1.2.1 JOIN用法： table1 join table2 (笛卡尔积) on table1.字段=table2.字段 (条件选择) 功能： 把来自两个或多个表的行结合起来 外连接 left join（左外连接）：结果集包含左表的所有行 right join(右外连接)：结果集包含右表的所有行 full join (完整外连接)：结果集包含左表和右表中的所有行 （null 字段 会显示） 内连接 join(内连接) :共有的列的值匹配两个表中的行 （null 字段 不会显示） 交叉连接 不带on字句 on 条件：过滤两个连接表笛卡尔积形成中间表 where条件：提取那些满足指定标准的记录 1.2.2 GROUP BY用法： GROUP BY 字段:结合聚合函数 根据字段值分组（根据字段分组） 功能： 结合聚合函数，根据一个或多个列对结果集进行分组。 聚合函数 count、sum、max、min、avg… select 后 + count（*）、min(字段) 新增属性 子查询(嵌套SELECT语句) 可以在SELECT，INSERT，UPDATE使用,返回将被用于在主查询作为条件的数据，以进一步限制要检索的数据 3. 事物和乐观锁2.1 事物的特性ACID Atomicity 事物要么不做 要么做完 Consistency 约束 事物满足的约束 Isolation 不同事物之间的独立性 Durability 事物结果的持续性 2.2 事物的隔离级别 Read uncommitted 未committed时 数据就可读取更新值 Read Committed 只有committed 之后 数据才会更新 Reapeatable Reads 在transaction 事物开始阶段读到的值为准 不管别的事物是否改变这个值 Serializable 其他事物进行数据update时 其他事物无法进行update 一般情况下，隔离级别不需要那么高 。 比如在Read Committed下 ,读上加锁：select 后加 for update 加锁 （悲观锁） 缺点：系统开销大，浪费资源，由此引入乐观锁。 3. 乐观锁不加transaction保护，而是加版本保护 update ‘表名’ set ‘属性名’=？ where 条件=？ and ‘属性名’=？(版本保护) 乐观锁演示 读取数据 ，记录Timestamp（某个属性值） 修改数据 检查和提交数据 适用冲突不多的情况（因为数据库读取比较慢） 4. 数据库的常见问题 介绍关系数据库的理论基础 关系代数 ：1-5 范式 给定场景，设计表结构 2范式：有主键 3范式：不能有传递依赖 (非主键字段之间不能有传递依赖) 给定表结构，按要求写SQL语句 参考前面sql语句 事物的ACID属性？哪些隔离级别？ 事物性能太慢怎么办？ 考虑使用乐观锁]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MVC设计模式]]></title>
    <url>%2F2018%2F04%2F02%2Fmvc%2F</url>
    <content type="text"><![CDATA[MVC简介背景随着应用系统的逐步增大，系统的业务逻辑复杂度正在呈现几何级数式增长，在这种情况下，采取传统的开发方法，讲系统的所有处理逻辑都放在JSP页面中，那将是程序员的一种噩梦。而MVC思想的出现给程序员带来了福音。 MVC模式MVC(Model、View、Control)是软件开发过程中比较流行的设计思想。在了解MVC之前，首先应明确一点，MVC是一种设计模式（设计思想），并不是一种编程技术。 MVC思想是将系统各个组件进行分类，不同组件扮演不同角色，然后将系统中的组件分隔到不同层中，组件被限制在其所在层，保证良好的封装性，MVC各层功能如下 模型（Model）层：实现系统业务逻辑 视图（View）层 ：用于与用户交互 控制（Control）层：是Model和View之间沟通的桥梁 这三层将整个业务应用划分为三层架构(3-tier architecture) ，即表现层（UI）、业务逻辑层（BLL）、数据访问层(DAL)。 1. 表现层（UI） 通俗讲就是展现给用户的界面，即用户在使用一个系统时的所见所得。 2. 业务逻辑层（BLL） 针对具体问题的操作，也可以说是对数据层的操作，对数据业务逻辑的处理。 3. 数据访问层(DAL） 直接操作数据库，包括对数据的增、删、改、查等。 MVC与三层结构的区别网上有一个很流行的例子，可以了解二者之间的区别。A在上海的浦东区逛街，有人要抢劫他，打110报警了，B在闵行区也被劫持，他也打110报警了，他们打110的时候，接电话的是上海市公安局总部指挥中心，对于A，来解救他是浦东分局的警察，对于B，解救他的是闵行分局的警察，对于AB来说，他们不需要关心到底是谁来解救他的，他们只管打110报警（类似于页面数据由action提交到控制器），由110指挥中心确定他的位置然后派出具体的地方警局去营救（控制器根据需求调用model层去完成对应的数据处理）。而三层架构在这个过程中就像A或B被劫持了，他们直接找到当地警（调用BLL层方法）的警察来处理 MVC特点 （1）低耦合性 首先，视图层和业务层的分离使得视图层代码和模型与控制器代码相分离。其次，因为模型与控制器和视图相分离，很容易改变应用程序的数据层和业务规则，从而降低层与层之间的耦合，提高了程序的可扩展性，有助于程序员灵活地进行编程 （2）可维护性高 模型、控制器与视图相分离，使得一个模型能对应多个视图，提高代码可维护性，一旦模型发生变化，方便维护。 （3）成本低，部署快 MVC使开发和维护用户和接口的技术含量降低，使用MVC模式使开发时间大大缩减，使程序员（Java开发人员）集中精力于业务逻辑，界面程序员（HML和JSP开发人员）集中精力于表现形式 （4）有利于工程化管理 MVC将不同模型和不同视图组合一起进行管理，层与层分离，各层有自己特色，各层只负责自己的任务，不用管其它层业务，代码可以复用，缩短软件开发周期 JSP Model1 和 JSP Model2对于Java阵营的动态Web编程技术而言，经历了所谓的Model 1和Model 2时代。 JSP Model1使用JSP Model1模式开发的Web项目都是由JSP页面构成。JSP页面既要负责显示还要负责控制，将控制逻辑和表现逻辑混在一起了。 优点： 开发比较简单和方便，非常适合小型Web项目的快速开发 对于JAva Web开发人员的技术水平要求不高 缺点： 重用性低，功能相似代码只能复制，不能直接调用 可扩展性低，如果以后想给程序扩展功能，将是非常困难的 传统的JSP Model1模型中，JSP是独立的，并自主完成所有任务，如图1-1所示 改进的JSP Model1模型中，JSP页面与JavaBean共同完成任务，如图1-2所示 JSP Model2JSP Model2是基于MVC架构的设计模式，使用了JSP、Servelt、JavaBean三种技术 JavaBean 充当模型（M）,负责业务逻辑以及对数据库的操作 JSP 只负责显示（V），生成动态网页 Servelt 充当控制器(C)，用来处理各种请求的分派 交互过程： 用户提交页面给JSP页面，JSP接收用户提交的值并通过JavaBean连接数据库并操作数据库，然后将结果返回给用户，JSP Model2 模型如图1-3所示 优点： 适合多人合作开发大型的Web项目 有利于组件的重用 有利于开发中的分工 缺点： Web项目的开发难度加大，同时对开发人员的技术要求也提高了]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chinese Text Detection and Recognition]]></title>
    <url>%2F2018%2F03%2F16%2F2017-03-06%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>Demo</category>
      </categories>
      <tags>
        <tag>homework</tag>
      </tags>
  </entry>
</search>
